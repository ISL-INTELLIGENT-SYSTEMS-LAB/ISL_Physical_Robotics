import rclpy
from rclpy.node import Node
import csv #For reading and writing data to csv
from std_msgs.msg import Float64
import sys
import cv2 # OpenCV library
from cv_bridge import CvBridge
from datetime import datetime
from .submodules.object_class import Object

turtlebot_name_1 = 'R2TB_01'
turtlebot_name_2 = 'R2TB_02'
turtlebot_name_3 = 'R2TB_03'
time_stamp = datetime.now().strftime("%Y_%m_%d-%H_%M_%S")
path_to_photo = f'/media/external/nearest_image{time_stamp}.png'
path_to_csv = '/home/ubuntu/ros2_ws/src/green_object_finder/green_object_finder/nearby_objects.csv'

class DistanceSub(Node):
    
    def __init__(self):
        self.current_distance = 1.5
        self.tb1_distance = read_csv()
        self.tb2_distance = None
        self.tb3_distance = None
        #tb_data
        self.tb_data = {turtlebot_name_1 : self.tb1_distance, turtlebot_name_2 : [], 
                        turtlebot_name_3 : []}
        self.closest_tb = None
        self.counter = 1
        timer_period = .5
        super().__init__('distance_sub')
        self.tb2_sub = self.create_subscription(Float64, turtlebot_name_2, self.tb2_sub_callback, 10)
        self.tb3_sub = self.create_subscription(Float64, turtlebot_name_3, self.tb3_sub_callback, 10)
        #timer callback for decision
        self.timer = self.create_timer(timer_period, self.timer_callback)

    def tb2_sub_callback(self, msg: Float64):
        if self.tb2_distance is None:
            self.tb2_distance = msg.data
            self.tb_data[turtlebot_name_2] = msg.data
            print(f'tb_02 - {msg.data}')
        else:
            self.tb2_sub.destroy()
    
    def tb3_sub_callback(self, msg: Float64):
        if self.tb3_distance is None:
            self.tb3_distance = msg.data
            self.tb_data[turtlebot_name_3] = msg.data
            print(f'tb_03 - {msg.data}')
        else:
            self.tb3_sub.destroy()

        
    def timer_callback(self):
        if not(self.tb2_distance is None or self.tb3_distance is None):
            closest_distance = 10
            for i in self.tb_data.keys():
                if self.tb_data[i] < closest_distance:
                    closest_distance = self.tb_data[i]
                    self.closest_tb = i

            print(f'Closest turtlebot is {self.closest_tb}')
            sys.exit()

    def take_photo(self):
        """This function is called once the turtlebot has found the closest green object. It will take
        a photo and save it as a png named 'nearest_image' followed by a time stamp.
        """
        cap = cv2.VideoCapture(0)
        ret, frame = cap.read()
        if ret:
            cv2.imwrite(path_to_photo, frame)
            print("Photo Taken")

def read_csv():
    """This function will read the csv generated by closest_objects.py and add them to a list to be
    iterated over.

    Returns:
        list: Returns a list of objects of the object class.
    """
    obj_distance = None
    with open(path_to_csv, 'r') as f:
        reader = csv.reader(f)

        for lines in reader:
            obj_distance = float(lines[2])
            print(f"tb_01 - {obj_distance}")

    return obj_distance


def main():
    rclpy.init(args=None)
    my_node = DistanceSub()
    rclpy.spin(my_node)
    my_node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
